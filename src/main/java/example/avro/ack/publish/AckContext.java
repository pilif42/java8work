/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.avro.ack.publish;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AckContext extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5484840647501759126L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AckContext\",\"namespace\":\"example.avro.ack.publish\",\"fields\":[{\"name\":\"consumerId\",\"type\":\"string\"},{\"name\":\"windowId\",\"type\":\"string\"},{\"name\":\"shardId\",\"type\":\"string\"},{\"name\":\"processedIds\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"failedIds\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AckContext> ENCODER =
      new BinaryMessageEncoder<AckContext>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AckContext> DECODER =
      new BinaryMessageDecoder<AckContext>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AckContext> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AckContext> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AckContext>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AckContext to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AckContext from a ByteBuffer. */
  public static AckContext fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence consumerId;
  @Deprecated public java.lang.CharSequence windowId;
  @Deprecated public java.lang.CharSequence shardId;
  @Deprecated public java.util.List<java.lang.CharSequence> processedIds;
  @Deprecated public java.util.List<java.lang.CharSequence> failedIds;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AckContext() {}

  /**
   * All-args constructor.
   * @param consumerId The new value for consumerId
   * @param windowId The new value for windowId
   * @param shardId The new value for shardId
   * @param processedIds The new value for processedIds
   * @param failedIds The new value for failedIds
   */
  public AckContext(java.lang.CharSequence consumerId, java.lang.CharSequence windowId, java.lang.CharSequence shardId, java.util.List<java.lang.CharSequence> processedIds, java.util.List<java.lang.CharSequence> failedIds) {
    this.consumerId = consumerId;
    this.windowId = windowId;
    this.shardId = shardId;
    this.processedIds = processedIds;
    this.failedIds = failedIds;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return consumerId;
    case 1: return windowId;
    case 2: return shardId;
    case 3: return processedIds;
    case 4: return failedIds;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: consumerId = (java.lang.CharSequence)value$; break;
    case 1: windowId = (java.lang.CharSequence)value$; break;
    case 2: shardId = (java.lang.CharSequence)value$; break;
    case 3: processedIds = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: failedIds = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'consumerId' field.
   * @return The value of the 'consumerId' field.
   */
  public java.lang.CharSequence getConsumerId() {
    return consumerId;
  }

  /**
   * Sets the value of the 'consumerId' field.
   * @param value the value to set.
   */
  public void setConsumerId(java.lang.CharSequence value) {
    this.consumerId = value;
  }

  /**
   * Gets the value of the 'windowId' field.
   * @return The value of the 'windowId' field.
   */
  public java.lang.CharSequence getWindowId() {
    return windowId;
  }

  /**
   * Sets the value of the 'windowId' field.
   * @param value the value to set.
   */
  public void setWindowId(java.lang.CharSequence value) {
    this.windowId = value;
  }

  /**
   * Gets the value of the 'shardId' field.
   * @return The value of the 'shardId' field.
   */
  public java.lang.CharSequence getShardId() {
    return shardId;
  }

  /**
   * Sets the value of the 'shardId' field.
   * @param value the value to set.
   */
  public void setShardId(java.lang.CharSequence value) {
    this.shardId = value;
  }

  /**
   * Gets the value of the 'processedIds' field.
   * @return The value of the 'processedIds' field.
   */
  public java.util.List<java.lang.CharSequence> getProcessedIds() {
    return processedIds;
  }

  /**
   * Sets the value of the 'processedIds' field.
   * @param value the value to set.
   */
  public void setProcessedIds(java.util.List<java.lang.CharSequence> value) {
    this.processedIds = value;
  }

  /**
   * Gets the value of the 'failedIds' field.
   * @return The value of the 'failedIds' field.
   */
  public java.util.List<java.lang.CharSequence> getFailedIds() {
    return failedIds;
  }

  /**
   * Sets the value of the 'failedIds' field.
   * @param value the value to set.
   */
  public void setFailedIds(java.util.List<java.lang.CharSequence> value) {
    this.failedIds = value;
  }

  /**
   * Creates a new AckContext RecordBuilder.
   * @return A new AckContext RecordBuilder
   */
  public static example.avro.ack.publish.AckContext.Builder newBuilder() {
    return new example.avro.ack.publish.AckContext.Builder();
  }

  /**
   * Creates a new AckContext RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AckContext RecordBuilder
   */
  public static example.avro.ack.publish.AckContext.Builder newBuilder(example.avro.ack.publish.AckContext.Builder other) {
    return new example.avro.ack.publish.AckContext.Builder(other);
  }

  /**
   * Creates a new AckContext RecordBuilder by copying an existing AckContext instance.
   * @param other The existing instance to copy.
   * @return A new AckContext RecordBuilder
   */
  public static example.avro.ack.publish.AckContext.Builder newBuilder(example.avro.ack.publish.AckContext other) {
    return new example.avro.ack.publish.AckContext.Builder(other);
  }

  /**
   * RecordBuilder for AckContext instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AckContext>
    implements org.apache.avro.data.RecordBuilder<AckContext> {

    private java.lang.CharSequence consumerId;
    private java.lang.CharSequence windowId;
    private java.lang.CharSequence shardId;
    private java.util.List<java.lang.CharSequence> processedIds;
    private java.util.List<java.lang.CharSequence> failedIds;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.avro.ack.publish.AckContext.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.consumerId)) {
        this.consumerId = data().deepCopy(fields()[0].schema(), other.consumerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.windowId)) {
        this.windowId = data().deepCopy(fields()[1].schema(), other.windowId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.shardId)) {
        this.shardId = data().deepCopy(fields()[2].schema(), other.shardId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.processedIds)) {
        this.processedIds = data().deepCopy(fields()[3].schema(), other.processedIds);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.failedIds)) {
        this.failedIds = data().deepCopy(fields()[4].schema(), other.failedIds);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AckContext instance
     * @param other The existing instance to copy.
     */
    private Builder(example.avro.ack.publish.AckContext other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.consumerId)) {
        this.consumerId = data().deepCopy(fields()[0].schema(), other.consumerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.windowId)) {
        this.windowId = data().deepCopy(fields()[1].schema(), other.windowId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.shardId)) {
        this.shardId = data().deepCopy(fields()[2].schema(), other.shardId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.processedIds)) {
        this.processedIds = data().deepCopy(fields()[3].schema(), other.processedIds);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.failedIds)) {
        this.failedIds = data().deepCopy(fields()[4].schema(), other.failedIds);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'consumerId' field.
      * @return The value.
      */
    public java.lang.CharSequence getConsumerId() {
      return consumerId;
    }

    /**
      * Sets the value of the 'consumerId' field.
      * @param value The value of 'consumerId'.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder setConsumerId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.consumerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'consumerId' field has been set.
      * @return True if the 'consumerId' field has been set, false otherwise.
      */
    public boolean hasConsumerId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'consumerId' field.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder clearConsumerId() {
      consumerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'windowId' field.
      * @return The value.
      */
    public java.lang.CharSequence getWindowId() {
      return windowId;
    }

    /**
      * Sets the value of the 'windowId' field.
      * @param value The value of 'windowId'.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder setWindowId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.windowId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'windowId' field has been set.
      * @return True if the 'windowId' field has been set, false otherwise.
      */
    public boolean hasWindowId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'windowId' field.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder clearWindowId() {
      windowId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'shardId' field.
      * @return The value.
      */
    public java.lang.CharSequence getShardId() {
      return shardId;
    }

    /**
      * Sets the value of the 'shardId' field.
      * @param value The value of 'shardId'.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder setShardId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.shardId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'shardId' field has been set.
      * @return True if the 'shardId' field has been set, false otherwise.
      */
    public boolean hasShardId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'shardId' field.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder clearShardId() {
      shardId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'processedIds' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getProcessedIds() {
      return processedIds;
    }

    /**
      * Sets the value of the 'processedIds' field.
      * @param value The value of 'processedIds'.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder setProcessedIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.processedIds = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'processedIds' field has been set.
      * @return True if the 'processedIds' field has been set, false otherwise.
      */
    public boolean hasProcessedIds() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'processedIds' field.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder clearProcessedIds() {
      processedIds = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'failedIds' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getFailedIds() {
      return failedIds;
    }

    /**
      * Sets the value of the 'failedIds' field.
      * @param value The value of 'failedIds'.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder setFailedIds(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.failedIds = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'failedIds' field has been set.
      * @return True if the 'failedIds' field has been set, false otherwise.
      */
    public boolean hasFailedIds() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'failedIds' field.
      * @return This builder.
      */
    public example.avro.ack.publish.AckContext.Builder clearFailedIds() {
      failedIds = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AckContext build() {
      try {
        AckContext record = new AckContext();
        record.consumerId = fieldSetFlags()[0] ? this.consumerId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.windowId = fieldSetFlags()[1] ? this.windowId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.shardId = fieldSetFlags()[2] ? this.shardId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.processedIds = fieldSetFlags()[3] ? this.processedIds : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.failedIds = fieldSetFlags()[4] ? this.failedIds : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AckContext>
    WRITER$ = (org.apache.avro.io.DatumWriter<AckContext>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AckContext>
    READER$ = (org.apache.avro.io.DatumReader<AckContext>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
