/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package example.avro.sparkpoc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Notification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4323615343463271109L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Notification\",\"namespace\":\"example.avro.sparkpoc\",\"fields\":[{\"name\":\"version\",\"type\":\"string\",\"default\":\"1.0.0\"},{\"name\":\"publishTime\",\"type\":\"string\"},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"item\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Item\",\"fields\":[{\"name\":\"guid\",\"type\":\"string\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ItemType\",\"symbols\":[\"Letter\",\"Parcel\"],\"default\":\"Letter\"}}]}]},{\"name\":\"outcome\",\"type\":{\"type\":\"enum\",\"name\":\"Outcome\",\"symbols\":[\"Delivered\",\"Returned\"],\"default\":\"Delivered\"}},{\"name\":\"deviceGuid\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Notification> ENCODER =
      new BinaryMessageEncoder<Notification>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Notification> DECODER =
      new BinaryMessageDecoder<Notification>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Notification> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Notification> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Notification>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Notification to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Notification from a ByteBuffer. */
  public static Notification fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence version;
  @Deprecated public java.lang.CharSequence publishTime;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public example.avro.sparkpoc.Item item;
  @Deprecated public example.avro.sparkpoc.Outcome outcome;
  @Deprecated public java.lang.CharSequence deviceGuid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Notification() {}

  /**
   * All-args constructor.
   * @param version The new value for version
   * @param publishTime The new value for publishTime
   * @param id The new value for id
   * @param item The new value for item
   * @param outcome The new value for outcome
   * @param deviceGuid The new value for deviceGuid
   */
  public Notification(java.lang.CharSequence version, java.lang.CharSequence publishTime, java.lang.CharSequence id, example.avro.sparkpoc.Item item, example.avro.sparkpoc.Outcome outcome, java.lang.CharSequence deviceGuid) {
    this.version = version;
    this.publishTime = publishTime;
    this.id = id;
    this.item = item;
    this.outcome = outcome;
    this.deviceGuid = deviceGuid;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return version;
    case 1: return publishTime;
    case 2: return id;
    case 3: return item;
    case 4: return outcome;
    case 5: return deviceGuid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: version = (java.lang.CharSequence)value$; break;
    case 1: publishTime = (java.lang.CharSequence)value$; break;
    case 2: id = (java.lang.CharSequence)value$; break;
    case 3: item = (example.avro.sparkpoc.Item)value$; break;
    case 4: outcome = (example.avro.sparkpoc.Outcome)value$; break;
    case 5: deviceGuid = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'version' field.
   * @return The value of the 'version' field.
   */
  public java.lang.CharSequence getVersion() {
    return version;
  }

  /**
   * Sets the value of the 'version' field.
   * @param value the value to set.
   */
  public void setVersion(java.lang.CharSequence value) {
    this.version = value;
  }

  /**
   * Gets the value of the 'publishTime' field.
   * @return The value of the 'publishTime' field.
   */
  public java.lang.CharSequence getPublishTime() {
    return publishTime;
  }

  /**
   * Sets the value of the 'publishTime' field.
   * @param value the value to set.
   */
  public void setPublishTime(java.lang.CharSequence value) {
    this.publishTime = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'item' field.
   * @return The value of the 'item' field.
   */
  public example.avro.sparkpoc.Item getItem() {
    return item;
  }

  /**
   * Sets the value of the 'item' field.
   * @param value the value to set.
   */
  public void setItem(example.avro.sparkpoc.Item value) {
    this.item = value;
  }

  /**
   * Gets the value of the 'outcome' field.
   * @return The value of the 'outcome' field.
   */
  public example.avro.sparkpoc.Outcome getOutcome() {
    return outcome;
  }

  /**
   * Sets the value of the 'outcome' field.
   * @param value the value to set.
   */
  public void setOutcome(example.avro.sparkpoc.Outcome value) {
    this.outcome = value;
  }

  /**
   * Gets the value of the 'deviceGuid' field.
   * @return The value of the 'deviceGuid' field.
   */
  public java.lang.CharSequence getDeviceGuid() {
    return deviceGuid;
  }

  /**
   * Sets the value of the 'deviceGuid' field.
   * @param value the value to set.
   */
  public void setDeviceGuid(java.lang.CharSequence value) {
    this.deviceGuid = value;
  }

  /**
   * Creates a new Notification RecordBuilder.
   * @return A new Notification RecordBuilder
   */
  public static example.avro.sparkpoc.Notification.Builder newBuilder() {
    return new example.avro.sparkpoc.Notification.Builder();
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Notification RecordBuilder
   */
  public static example.avro.sparkpoc.Notification.Builder newBuilder(example.avro.sparkpoc.Notification.Builder other) {
    return new example.avro.sparkpoc.Notification.Builder(other);
  }

  /**
   * Creates a new Notification RecordBuilder by copying an existing Notification instance.
   * @param other The existing instance to copy.
   * @return A new Notification RecordBuilder
   */
  public static example.avro.sparkpoc.Notification.Builder newBuilder(example.avro.sparkpoc.Notification other) {
    return new example.avro.sparkpoc.Notification.Builder(other);
  }

  /**
   * RecordBuilder for Notification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Notification>
    implements org.apache.avro.data.RecordBuilder<Notification> {

    private java.lang.CharSequence version;
    private java.lang.CharSequence publishTime;
    private java.lang.CharSequence id;
    private example.avro.sparkpoc.Item item;
    private example.avro.sparkpoc.Item.Builder itemBuilder;
    private example.avro.sparkpoc.Outcome outcome;
    private java.lang.CharSequence deviceGuid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(example.avro.sparkpoc.Notification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.publishTime)) {
        this.publishTime = data().deepCopy(fields()[1].schema(), other.publishTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.item)) {
        this.item = data().deepCopy(fields()[3].schema(), other.item);
        fieldSetFlags()[3] = true;
      }
      if (other.hasItemBuilder()) {
        this.itemBuilder = example.avro.sparkpoc.Item.newBuilder(other.getItemBuilder());
      }
      if (isValidValue(fields()[4], other.outcome)) {
        this.outcome = data().deepCopy(fields()[4].schema(), other.outcome);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deviceGuid)) {
        this.deviceGuid = data().deepCopy(fields()[5].schema(), other.deviceGuid);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Notification instance
     * @param other The existing instance to copy.
     */
    private Builder(example.avro.sparkpoc.Notification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.version)) {
        this.version = data().deepCopy(fields()[0].schema(), other.version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.publishTime)) {
        this.publishTime = data().deepCopy(fields()[1].schema(), other.publishTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.id)) {
        this.id = data().deepCopy(fields()[2].schema(), other.id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.item)) {
        this.item = data().deepCopy(fields()[3].schema(), other.item);
        fieldSetFlags()[3] = true;
      }
      this.itemBuilder = null;
      if (isValidValue(fields()[4], other.outcome)) {
        this.outcome = data().deepCopy(fields()[4].schema(), other.outcome);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.deviceGuid)) {
        this.deviceGuid = data().deepCopy(fields()[5].schema(), other.deviceGuid);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'version' field.
      * @return The value.
      */
    public java.lang.CharSequence getVersion() {
      return version;
    }

    /**
      * Sets the value of the 'version' field.
      * @param value The value of 'version'.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder setVersion(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.version = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'version' field has been set.
      * @return True if the 'version' field has been set, false otherwise.
      */
    public boolean hasVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'version' field.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder clearVersion() {
      version = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'publishTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getPublishTime() {
      return publishTime;
    }

    /**
      * Sets the value of the 'publishTime' field.
      * @param value The value of 'publishTime'.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder setPublishTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.publishTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'publishTime' field has been set.
      * @return True if the 'publishTime' field has been set, false otherwise.
      */
    public boolean hasPublishTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'publishTime' field.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder clearPublishTime() {
      publishTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder setId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder clearId() {
      id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'item' field.
      * @return The value.
      */
    public example.avro.sparkpoc.Item getItem() {
      return item;
    }

    /**
      * Sets the value of the 'item' field.
      * @param value The value of 'item'.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder setItem(example.avro.sparkpoc.Item value) {
      validate(fields()[3], value);
      this.itemBuilder = null;
      this.item = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'item' field has been set.
      * @return True if the 'item' field has been set, false otherwise.
      */
    public boolean hasItem() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'item' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public example.avro.sparkpoc.Item.Builder getItemBuilder() {
      if (itemBuilder == null) {
        if (hasItem()) {
          setItemBuilder(example.avro.sparkpoc.Item.newBuilder(item));
        } else {
          setItemBuilder(example.avro.sparkpoc.Item.newBuilder());
        }
      }
      return itemBuilder;
    }

    /**
     * Sets the Builder instance for the 'item' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public example.avro.sparkpoc.Notification.Builder setItemBuilder(example.avro.sparkpoc.Item.Builder value) {
      clearItem();
      itemBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'item' field has an active Builder instance
     * @return True if the 'item' field has an active Builder instance
     */
    public boolean hasItemBuilder() {
      return itemBuilder != null;
    }

    /**
      * Clears the value of the 'item' field.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder clearItem() {
      item = null;
      itemBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'outcome' field.
      * @return The value.
      */
    public example.avro.sparkpoc.Outcome getOutcome() {
      return outcome;
    }

    /**
      * Sets the value of the 'outcome' field.
      * @param value The value of 'outcome'.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder setOutcome(example.avro.sparkpoc.Outcome value) {
      validate(fields()[4], value);
      this.outcome = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'outcome' field has been set.
      * @return True if the 'outcome' field has been set, false otherwise.
      */
    public boolean hasOutcome() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'outcome' field.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder clearOutcome() {
      outcome = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'deviceGuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceGuid() {
      return deviceGuid;
    }

    /**
      * Sets the value of the 'deviceGuid' field.
      * @param value The value of 'deviceGuid'.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder setDeviceGuid(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.deviceGuid = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'deviceGuid' field has been set.
      * @return True if the 'deviceGuid' field has been set, false otherwise.
      */
    public boolean hasDeviceGuid() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'deviceGuid' field.
      * @return This builder.
      */
    public example.avro.sparkpoc.Notification.Builder clearDeviceGuid() {
      deviceGuid = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Notification build() {
      try {
        Notification record = new Notification();
        record.version = fieldSetFlags()[0] ? this.version : (java.lang.CharSequence) defaultValue(fields()[0], record.getConversion(0));
        record.publishTime = fieldSetFlags()[1] ? this.publishTime : (java.lang.CharSequence) defaultValue(fields()[1], record.getConversion(1));
        record.id = fieldSetFlags()[2] ? this.id : (java.lang.CharSequence) defaultValue(fields()[2], record.getConversion(2));
        if (itemBuilder != null) {
          record.item = this.itemBuilder.build();
        } else {
          record.item = fieldSetFlags()[3] ? this.item : (example.avro.sparkpoc.Item) defaultValue(fields()[3], record.getConversion(3));
        }
        record.outcome = fieldSetFlags()[4] ? this.outcome : (example.avro.sparkpoc.Outcome) defaultValue(fields()[4], record.getConversion(4));
        record.deviceGuid = fieldSetFlags()[5] ? this.deviceGuid : (java.lang.CharSequence) defaultValue(fields()[5], record.getConversion(5));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Notification>
    WRITER$ = (org.apache.avro.io.DatumWriter<Notification>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Notification>
    READER$ = (org.apache.avro.io.DatumReader<Notification>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
